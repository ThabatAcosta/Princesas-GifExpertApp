{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategorias","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","prototype","PropTypes","func","isRequired","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","index","ReactDOM","render","document","getElementById"],"mappings":"kMAKaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAsBI,OACC,sBAAMC,SAbS,SAACC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAC9BR,GAAe,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACxCN,EAAc,MAQd,SACE,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAxBe,SAACP,GACvBF,EAAcE,EAAEQ,OAAOF,aA+B9BZ,EAAYe,UAAY,CACpBd,cAAee,IAAUC,KAAKC,Y,mCCvCrBC,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DAEbC,EAFa,iDAEoCC,UAAUH,GAF9C,+DAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAKDC,EAAOD,EAAKE,KAAK,SAAAC,GACnB,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAKQ,EAAIG,OAAOC,iBAAiBZ,QAbtB,kBAiBZM,GAjBY,4CAAH,sDCFPO,EAAc,SAAC,GAAmB,IAAjBH,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IAEjC,OAEI,sBAAKc,UAAU,wCAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAIA,QCHHO,EAAU,SAAC,GAAkB,IAAhBnB,EAAe,EAAfA,SAEvB,ECDyB,SAACA,GAEzB,MAA0BlB,mBAAS,CAC/ByB,KAAM,GACNa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAiBA,OAZAC,qBAAU,WAENxB,EAAQC,GACJwB,MAAK,SAAAC,GACDH,EAAS,CACNf,KAAMkB,EACNL,SAAS,UAMjBC,EDlBwBK,CAAc1B,GAAjCa,EAAb,EAAON,KAAca,EAArB,EAAqBA,QAGpB,OAEI,qCACI,qBAAIJ,UAAU,mCAAd,cAAmDhB,EAAnD,OAICoB,GAAW,mBAAGJ,UAAU,mCAAb,qBAGZ,qBAAKA,UAAU,YAAf,SAGQH,EAAOJ,KAAK,SAAAC,GAAG,OACZ,cAAC,EAAD,eAEIA,GADCA,EAAIC,aEnBnBgB,EAAe,WAEzB,MAAoC7C,mBAAS,CAAC,cAA9C,mBAAO8C,EAAP,KAAmB/C,EAAnB,KAGC,OAEI,qCACA,8CAIA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBAGA,6BAEQ+C,EAAWnB,KAAM,SAACT,EAAU6B,GAAX,OACb,cAAC,EAAD,CAEI7B,SAAUA,GADL6B,Y,MCpB7BC,IAASC,OAEL,cAAC,EAAD,IAEFC,SAASC,eAAe,W","file":"static/js/main.4b8ac83b.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nimport PropTypes  from 'prop-types';\r\n\r\n\r\n\r\nexport const AddCategory = ({setCategorias}) => {\r\n\r\n   const [inputValue, setInputValue] = useState('');\r\n   \r\n// Con esta funcion extraigo el valor del input\r\n   const handleInputChange = (e) => {\r\n       setInputValue(e.target.value);\r\n    \r\n   }\r\n    \r\n   \r\n   //Con esta funcion evito que mi pagina a pesar de cualquier evento regrese a su estado inicial, es decir que los eventos se generen y sigan su curso\r\n   const handleSumit = (e) => {\r\n       e.preventDefault(); \r\n       // El trim quita los espacios en blanco \r\n       if( inputValue.trim().length > 2){ \r\n        setCategorias( cats => [ inputValue, ...cats ]);\r\n        setInputValue('');\r\n       }    \r\n   }\r\n\r\n\r\n       //onSubmit es el click del evento (para formulario)\r\n       //onChance cuando cambie, realiza el evento que yo le diga (input)\r\n       return (\r\n        <form onSubmit={handleSumit}> \r\n          <input\r\n              type=\"text\"\r\n              value={inputValue}\r\n              onChange={handleInputChange}\r\n          /> \r\n        </form>\r\n    )\r\n}\r\n\r\n\r\n\r\nAddCategory.prototype = {\r\n    setCategorias: PropTypes.func.isRequired\r\n}\r\n\r\n\r\n\r\n       //props.setCategorias() 1ra manera de hacerlo con (props) en el parametro\r\n       // setCategorias( cats => [...cats, inputValue]); 2da manera con ({setCategorias}) desestructuracion en los parametros\r\n\r\n\r\n//onSumit se utiliza para evitar que se refresque toda la pagina con el enter sino solo lo que necesitamos\r\n\r\n//onChange","\r\n\r\n\r\n//Recibir una categoria y hacer una peticion http\r\nexport const getGifs = async(category) => {\r\n\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category)}&limit=10&api_key=2XlPJVB9ZLKDnXXFvUFPAxgD31vPGO3h`;\r\n    const resp = await fetch(url); //fech con el fech se le hacen peticiones al navegador y regresa una promesa\r\n    const {data} = await resp.json();\r\n    \r\n    \r\n   \r\n    // De esta manera accedo solo a los datos que quiero de cada usuario de mi arreglo de objetos\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images.downsized_medium.url\r\n        }\r\n    })\r\n\r\n    return gifs;\r\n    }\r\n\r\n    //Este archivo fue creado para hacer la mencion de la url de la api o libreria la cual usamos para la app","import React from 'react'\r\n\r\nexport const GifGridItem = ({ title, url}) => {\r\n\r\n    return (\r\n\r\n        <div className=\"card animate__animated animate__swing\" >\r\n            <img src={url} alt={title}/>\r\n            <p>{title}</p>\r\n        </div>\r\n        \r\n    )\r\n}\r\n\r\n//Este componente se creo para mostrar las imagenes y los titulos de las imagenes\r\n","import React, { } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\n\r\nexport const GifGrid = ({ category }) => {\r\n\r\n   const {data: images, loading} = useFetchGifs( category ); \r\n\r\n\r\n    return (\r\n\r\n        <>\r\n            <h3 className=\"animate__animated animate__flash\"> {category} </h3>\r\n\r\n\r\n            {/* // && Cuando se cumpla la condicion muestro lo demas que esta despues de las && */}\r\n            {loading && <p className=\"animate__animated animate__flash\">Loading</p> } \r\n\r\n\r\n            <div className=\"card-grid\">\r\n            \r\n                {\r\n                    images.map( img  => (\r\n                       <GifGridItem \r\n                       key={img.id}\r\n                       {...img} /> \r\n                       ))\r\n                } \r\n\r\n            </div> \r\n\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n//Cuando quiero acceder a una propiedad dentro de un json utilizo la desestructuracion\r\n  // Ej const data = await resp.json(); y coloco const {data} = await resp.json(); ya que quiero la data que esta dentro de la constante data\r\n\r\n\r\n\r\n\r\n//    //Utilizo el useEfecct para invocar la funcion pero se le genera un [] array vacio para que solo se ejecute una vez en consola\r\n//     // Es decir se ejecute la funcion cuando el componente es renderizdo por primera vez\r\n//    //Se lanza la funcion y luego de que getGifs(category) la detecte la lanza y refleja con .then(setImages);\r\n//     useEffect( () => {\r\n//         getGifs(category)\r\n//             .then(setImages);\r\n//     }, [category])\r\n\r\n\r\n\r\n\r\n  //Se crea esta funcion de javascript para mostrar en una lista los datos como el id y el title en nuestra app\r\n/* <ol> \r\n                {\r\n                    images.map( ({ id, title})  => (\r\n                        <li key={id}> {title} </li>\r\n                        ))\r\n                }\r\n               \r\n    </ol> */\r\n\r\n\r\n//Se utiliza este operador ternario para darle una instruccion sobre que decir mientras loading se esta ejecutando\r\n//{ loading ? 'Cargando' : 'Data Cargada'}\r\n\r\n// &&","//Los hooks no son mas que funciones\r\nimport { useState, useEffect } from \"react\"\r\nimport {getGifs} from \"../helpers/getGifs\"\r\n\r\n\r\n\r\nexport const useFetchGifs = (category) => {\r\n\r\n    const [state, setState] = useState({\r\n        data: [],\r\n        loading: true\r\n    }); \r\n\r\n    useEffect(() => {\r\n\r\n        getGifs(category)\r\n           .then(imgs => {\r\n                setState({\r\n                   data: imgs,\r\n                   loading: false\r\n                 })\r\n            \r\n         })\r\n    })\r\n\r\n    return state; // { data: [], loading: true }\r\n}\r\n\r\n//Este hook fue creado para...","import React, {useState} from 'react';\r\nimport { AddCategory } from './components/AddCategory';\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\n\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n   const [categorias, setCategorias] = useState(['Princesas'])\r\n\r\n\r\n    return (\r\n        \r\n        <> \r\n        <h2>GifExpertApp</h2>\r\n\r\n\r\n\r\n        <AddCategory setCategorias={setCategorias}/>\r\n        <hr/>\r\n\r\n\r\n        <ol>\r\n            {\r\n                categorias.map ( (category, index) => (\r\n                    <GifGrid\r\n                        key={index}\r\n                        category={category}\r\n                    \r\n                    />\r\n                ))\r\n            }\r\n        </ol>\r\n        </>\r\n    )\r\n}\r\n\r\n//COMENTARIOS\r\n\r\n//Se utilizo para correr todos los elementos he insertar uno mas\r\n// const handleAdd = () => {\r\n    //     setCategorias([...categorias, 'Frozen']);\r\n    //     return\r\n    // }\r\n\r\n\r\n// Se utilizo para colocar los elementos del arreglo en una lista ordenada\r\n// <ol>\r\n//      {\r\n//        categorias.map ( category => (\r\n//          <li key={category}> {category} </li>  \r\n//          ))\r\n//        }\r\n//  </ol>","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {GifExpertApp} from './GifExpertApp'\nimport './index.css';\n\n\nReactDOM.render(\n  \n    <GifExpertApp/>,\n  \n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}